# Generated by Django 2.2.16 on 2021-08-18 20:24
import django.db.models.deletion
from django.db import migrations, models

TYPE_HOLIDAY = 'H'
TYPE_WORKDAY = 'W'
TYPE_VACATION = 'V'
TYPE_SICK = 'S'
TYPE_QUALIFICATION = 'Q'
TYPE_ABSENSE = 'A'
TYPE_MATERNITY = 'M'
TYPE_BUSINESS_TRIP = 'T'
TYPE_ETC = 'O'
TYPE_EMPTY = 'E'
TYPE_SELF_VACATION = 'TV'  # TV, а не SV, потому что так уже написали в документации клиенту


def create_worker_day_types(apps, schema_editor):
    WorkerDayType = apps.get_model('timetable', 'WorkerDayType')

    wd_types_to_create = [
        WorkerDayType(
            code=TYPE_WORKDAY,
            name='Рабочий день',
            short_name='Р/Д',
            html_color='#f7f7f7',
            use_in_plan=True,
            use_in_fact=True,
            excel_load_code='Я',
            is_dayoff=False,
            is_work_hours=True,
            is_reduce_norm=False,
            is_system=True,
            show_stat_in_days=False,
            show_stat_in_hours=False,
            ordering=100,
        ),
        WorkerDayType(
            code=TYPE_HOLIDAY,
            name='Выходной',
            short_name='ВЫХ',
            html_color='#7ae7a5',
            use_in_plan=True,
            use_in_fact=False,
            excel_load_code='В',
            is_dayoff=True,
            is_work_hours=False,
            is_reduce_norm=False,
            is_system=True,
            show_stat_in_days=True,
            show_stat_in_hours=False,
            ordering=95,
        ),
        WorkerDayType(
            code=TYPE_VACATION,
            name='Отпуск',
            short_name='ОТП',
            html_color='#e6e588',
            use_in_plan=True,
            use_in_fact=False,
            excel_load_code='ОТ',
            is_dayoff=True,
            is_work_hours=False,
            is_reduce_norm=True,
            is_system=False,
            show_stat_in_days=True,
            show_stat_in_hours=False,
            ordering=90,
        ),
        WorkerDayType(
            code=TYPE_SELF_VACATION,
            name='Отпуск за свой счет',
            short_name='ОЗСС',
            html_color='#a3a34b',
            use_in_plan=True,
            use_in_fact=False,
            excel_load_code='ДО',
            is_dayoff=True,
            is_work_hours=False,
            is_reduce_norm=True,
            is_system=False,
            show_stat_in_days=True,
            show_stat_in_hours=False,
            ordering=85,
        ),
        WorkerDayType(
            code=TYPE_QUALIFICATION,
            name='Учёба',
            short_name='УЧ',
            html_color='#2036c0',
            use_in_plan=True,
            use_in_fact=True,
            excel_load_code='У',
            is_dayoff=False,
            is_work_hours=True,
            is_reduce_norm=False,
            is_system=False,
            show_stat_in_days=True,
            show_stat_in_hours=False,
            ordering=80,
        ),
        WorkerDayType(
            code=TYPE_SICK,
            name='Больничный',
            short_name='БОЛ',
            html_color='#c13329',
            use_in_plan=True,
            use_in_fact=False,
            excel_load_code='Б',
            is_dayoff=True,
            is_work_hours=False,
            is_reduce_norm=True,
            is_system=False,
            show_stat_in_days=True,
            show_stat_in_hours=False,
            ordering=75,
        ),
        WorkerDayType(
            code=TYPE_ABSENSE,
            name='Неявка',
            short_name='ОТС',
            html_color='#c16627',
            use_in_plan=True,
            use_in_fact=False,
            excel_load_code='НН',
            is_dayoff=True,
            is_work_hours=False,
            is_reduce_norm=False,
            is_system=True,
            show_stat_in_days=False,
            show_stat_in_hours=False,
            ordering=70,
        ),
        WorkerDayType(
            code=TYPE_MATERNITY,
            name='Декрет',
            short_name='ДЕК',
            html_color='#b742a5',
            use_in_plan=True,
            use_in_fact=False,
            excel_load_code='ОЖ',
            is_dayoff=True,
            is_work_hours=False,
            is_reduce_norm=True,
            is_system=False,
            show_stat_in_days=False,
            show_stat_in_hours=False,
            ordering=65,
        ),
        WorkerDayType(
            code=TYPE_BUSINESS_TRIP,
            name='Командировка',
            short_name='КОМ',
            html_color='#6a8acc',
            use_in_plan=True,
            use_in_fact=True,
            excel_load_code='К',
            is_dayoff=False,
            is_work_hours=True,
            is_reduce_norm=False,
            is_system=False,
            show_stat_in_days=False,
            show_stat_in_hours=False,
            ordering=60,
        ),
        WorkerDayType(
            code=TYPE_ETC,
            name='Другое',
            short_name='ДР',
            html_color='#a28ba6',
            use_in_plan=True,
            use_in_fact=False,
            excel_load_code='ДР',
            is_dayoff=True,
            is_work_hours=False,
            is_reduce_norm=False,
            is_system=False,
            show_stat_in_days=False,
            show_stat_in_hours=False,
            ordering=55,
        ),
        WorkerDayType(
            code=TYPE_EMPTY,
            name='Удаление',
            short_name='УД',
            html_color='#ffffff',
            use_in_plan=False,
            use_in_fact=True,
            excel_load_code='УД',
            is_dayoff=True,
            is_work_hours=False,
            is_reduce_norm=False,
            is_system=True,
            show_stat_in_days=False,
            show_stat_in_hours=False,
            ordering=50,
        ),
    ]

    WorkerDayType.objects.bulk_create(wd_types_to_create)


def set_blank_main_timesheet_as_null(apps, schema_editor):
    Timesheet = apps.get_model('timetable', 'Timesheet')
    Timesheet.objects.filter(main_timesheet_type='').update(main_timesheet_type=None)


def drop_views(apps, schema_editor):
    schema_editor.execute("""
        DROP VIEW IF EXISTS v_mda_users CASCADE;
        DROP VIEW IF EXISTS timetable_plan_and_fact_hours CASCADE;
    """)

def recreate_views(apps, schema_editor):
    schema_editor.execute("""\
CREATE OR REPLACE VIEW v_mda_users AS
  SELECT DISTINCT u.id,
    u.username,
    u.last_name,
    u.first_name,
    u.middle_name,
    u.email,
    e.dt_hired,
    e.dt_fired,
    e.dttm_deleted IS NULL AND e.dt_hired <= CURRENT_TIMESTAMP::date AND (e.dt_fired IS NULL OR e.dt_fired >= CURRENT_TIMESTAMP::date) AS active,
        CASE
            WHEN s.level = 0 THEN 'COMPANY'::text
            WHEN s.level = 1 THEN 'DIVISION'::text
            WHEN s.level = 2 THEN 'REGION'::text
            WHEN s.level = 3 THEN 'SHOP'::text
            ELSE NULL::text
        END AS level,
        CASE
            WHEN e.dttm_deleted IS NULL AND e.dt_hired <= CURRENT_TIMESTAMP::date AND (e.dt_fired IS NULL OR e.dt_fired >= CURRENT_TIMESTAMP::date) AND e.id = (( SELECT e2.id
               FROM base_employment e2
                 JOIN base_employee employee2 ON e2.employee_id = employee2.id
                 JOIN base_user u2 ON employee2.user_id = u2.id
                 JOIN base_shop s2 ON e2.shop_id = s2.id
                 LEFT JOIN base_workerposition wp2 ON e2.position_id = wp2.id
                 LEFT JOIN base_group fg2 ON e2.function_group_id = fg2.id
                 LEFT JOIN base_group g2 ON wp2.group_id = g2.id
              WHERE s2.id = s.id AND (g2.code::text = 'director'::text OR fg2.code::text = 'director'::text) AND e2.dttm_deleted IS NULL AND e2.dt_hired <= CURRENT_TIMESTAMP::date AND (e2.dt_fired IS NULL OR e2.dt_fired >= CURRENT_TIMESTAMP::date)
              ORDER BY ((EXISTS ( SELECT wd2.id
                       FROM timetable_workerday wd2
                      WHERE wd2.employee_id = employee2.id AND wd2.dt = now()::date AND (wd2.type_id::text = ANY (ARRAY['M'::character varying, 'S'::character varying, 'V'::character varying]::text[])) AND wd2.is_fact IS FALSE AND wd2.is_approved IS TRUE))), e2.is_visible DESC, e2.norm_work_hours DESC, ((EXISTS ( SELECT ds.id
                       FROM base_shop ds
                      WHERE ds.director_id = employee2.user_id))) DESC, e2.dt_hired DESC
             LIMIT 1)) THEN 'DIR'::text
            WHEN NOT (e.dttm_deleted IS NULL AND e.dt_hired <= CURRENT_TIMESTAMP::date AND (e.dt_fired IS NULL OR e.dt_fired >= CURRENT_TIMESTAMP::date)) AND (g.code::text = 'director'::text OR fg.code::text = 'director'::text) THEN 'DIR'::text
            ELSE 'MANAGER'::text
        END AS role,
    s.name AS shop_name,
    s.code AS shop_code,
    wp.name AS position_name,
    wp.code AS position_code,
    g.name AS position_group_name,
    g.code AS position_group_code,
    fg.name AS func_group_name,
    fg.code AS func_group_code,
    u.dttm_modified AS user_last_modified,
    e.dttm_modified AS employment_last_modified,
    wp.dttm_modified AS position_last_modified,
    GREATEST(u.dttm_modified, e.dttm_modified, wp.dttm_modified) AS last_modified,
    e.code
   FROM base_employment e
     JOIN base_employee employee ON e.employee_id = employee.id
     JOIN base_user u ON employee.user_id = u.id
     JOIN base_shop s ON e.shop_id = s.id
     LEFT JOIN base_workerposition wp ON e.position_id = wp.id
     LEFT JOIN base_group fg ON e.function_group_id = fg.id
     LEFT JOIN base_group g ON wp.group_id = g.id
     LEFT JOIN timetable_workerday wdpa ON employee.id = wdpa.employee_id AND wdpa.dt = now()::date AND wdpa.is_fact = false AND wdpa.is_approved = true
  WHERE true AND e.dttm_deleted IS NULL AND (s.dttm_deleted IS NULL OR s.dttm_deleted >= (CURRENT_TIMESTAMP - '60 days'::interval)) AND (s.dt_closed IS NULL OR s.dt_closed >= (CURRENT_TIMESTAMP - '60 days'::interval)) AND (e.dt_fired > '2020-10-01'::date AND e.dt_hired < e.dt_fired OR e.dt_fired IS NULL) AND e.dt_hired <= CURRENT_TIMESTAMP::date AND (NOT g.code::text = 'director'::text OR wp.group_id IS NULL OR g.code::text = 'director'::text AND (wdpa.type_id IS NULL OR (wdpa.type_id::text <> ALL (ARRAY['M'::text])))) AND s.level = 3;""")

class Migration(migrations.Migration):
    dependencies = [
        ('timetable', '0082_auto_20210819_2214'),
    ]

    operations = [
        migrations.RunPython(create_worker_day_types, migrations.RunPython.noop),
        migrations.RunPython(drop_views, migrations.RunPython.noop),
        migrations.AlterField(
            model_name='timesheet',
            name='fact_timesheet_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='fact_timesheet', to='timetable.WorkerDayType'),
        ),
        migrations.AlterField(
            model_name='timesheet',
            name='main_timesheet_type',
            field=models.CharField(blank=True, null=True,
                                   choices=[('H', 'Выходной'), ('W', 'Рабочий день'), ('V', 'Отпуск'),
                                            ('S', 'Больничный лист'), ('Q', 'Квалификация'),
                                            ('A', 'Неявка до выяснения обстоятельств'),
                                            ('M', 'Б/л по беременноси и родам'), ('T', 'Командировка'), ('O', 'Другое'),
                                            ('D', 'Удален'), ('E', 'Пусто'), ('HW', 'Работа в выходной день'),
                                            ('RA', 'Прогул на основании акта'), ('EV', 'Доп. отпуск'),
                                            ('SV', 'Учебный отпуск'), ('TV', 'Отпуск за свой счёт'),
                                            ('ST', 'Отпуск за свой счёт по уважительной причине'),
                                            ('G', 'Гос. обязанности'), ('HS', 'Спец. выходной'),
                                            ('MC', 'Отпуск по уходу за ребёнком до 3-х лет'),
                                            ('C', 'Выходные дни по уходу')], max_length=2),
        ),
        migrations.RunPython(set_blank_main_timesheet_as_null, migrations.RunPython.noop),
        migrations.AlterField(
            model_name='timesheet',
            name='main_timesheet_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='main_timesheet', to='timetable.WorkerDayType'),
        ),
        migrations.AlterField(
            model_name='workerday',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='timetable.WorkerDayType'),
        ),
        migrations.AlterField(
            model_name='workerdaypermission',
            name='wd_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='timetable.WorkerDayType',
                                    verbose_name='Тип дня'),
        ),
        migrations.AlterField(
            model_name='planandfacthours',
            name='wd_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='timetable.WorkerDayType'),
        ),
        migrations.RunPython(recreate_views, migrations.RunPython.noop),
    ]
