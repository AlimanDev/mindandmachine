# Generated by Django 2.2.16 on 2021-11-09 05:47

from django.db import migrations

def replace_view_plan_and_fact_hours(apps, schema_editor):
    Network = apps.get_model('base', 'Network')
    if Network.objects.filter(code='orteka').exists():
        schema_editor.execute("""
CREATE OR REPLACE VIEW timetable_plan_and_fact_hours AS
SELECT string_agg(wd.id::text, '-'::text ORDER BY wd.is_fact) AS id,
    wd.dt,
    wd.shop_id,
    s.name AS shop_name,
    s.code AS shop_code,
    employee.user_id AS worker_id,
    wd.type_id AS wd_type,
    concat(u.last_name, ' ', u.first_name, ' ', u.middle_name) AS worker_fio,
    COALESCE(sum(date_part('epoch'::text, GREATEST(wd.work_hours, '00:00:00'::interval)) / 3600::double precision) FILTER (WHERE wd.is_fact IS TRUE), 0::double precision) AS fact_work_hours,
    COALESCE(sum(date_part('epoch'::text, GREATEST(wd.work_hours, '00:00:00'::interval)) / 3600::double precision) FILTER (WHERE wd.is_fact IS FALSE), 0::double precision) AS plan_work_hours,
    ((min(wd.dttm_work_start) FILTER (WHERE wd.is_fact IS TRUE) - min(wd.dttm_work_start) FILTER (WHERE wd.is_fact IS FALSE)) > shop_network.allowed_interval_for_late_arrival)::integer AS late_arrival,
    ((max(wd.dttm_work_end) FILTER (WHERE wd.is_fact IS FALSE) - max(wd.dttm_work_end) FILTER (WHERE wd.is_fact IS TRUE)) > shop_network.allowed_interval_for_early_departure)::integer AS early_departure,
        CASE
            WHEN count(*) FILTER (WHERE wd.is_fact IS FALSE AND wd.is_vacancy IS TRUE) = 1 THEN true
            ELSE false
        END AS is_vacancy,
    (count(*) FILTER (WHERE wd.is_fact IS TRUE AND wd.dttm_work_start IS NOT NULL) + count(*) FILTER (WHERE wd.is_fact IS TRUE AND wd.dttm_work_end IS NOT NULL))::integer AS ticks_fact_count,
    (COALESCE(count(*) FILTER (WHERE wd.is_fact IS FALSE AND wd.type_id::text = 'W'::text), 0::bigint) * 2)::integer AS ticks_plan_count,
    u.username AS worker_username,
    COALESCE(wd_details_wt_name.name, ''::character varying) AS work_type_name,
    date_trunc('minute'::text, min(wd.dttm_work_start) FILTER (WHERE wd.is_fact IS FALSE)) AS dttm_work_start_plan,
    date_trunc('minute'::text, max(wd.dttm_work_end) FILTER (WHERE wd.is_fact IS FALSE)) AS dttm_work_end_plan,
    date_trunc('minute'::text, min(wd.dttm_work_start) FILTER (WHERE wd.is_fact IS TRUE)) AS dttm_work_start_fact,
    date_trunc('minute'::text, max(wd.dttm_work_end) FILTER (WHERE wd.is_fact IS TRUE)) AS dttm_work_end_fact,
    count(*) FILTER (WHERE wd.is_fact IS TRUE AND wd.dttm_work_start IS NOT NULL)::integer AS ticks_comming_fact_count,
    count(*) FILTER (WHERE wd.is_fact IS TRUE AND wd.dttm_work_end IS NOT NULL)::integer AS ticks_leaving_fact_count,
    count(*) FILTER (WHERE wd.is_fact IS FALSE AND wd.created_by_id IS NULL AND wd.last_edited_by_id IS NULL AND wd.work_hours IS NOT NULL AND wd.work_hours > '00:00:00'::interval) AS auto_created_plan,
    count(*) FILTER (WHERE wd.is_fact IS TRUE AND wd.created_by_id IS NULL AND wd.last_edited_by_id IS NULL AND wd.work_hours IS NOT NULL AND wd.work_hours > '00:00:00'::interval) AS auto_created_fact,
    employee.tabel_code,
    wd.employee_id,
    shop_network.name AS shop_network,
    user_network.name AS user_network,
    shop_network.id <> user_network.id AS is_outsource
   FROM timetable_workerday wd
     JOIN base_shop s ON wd.shop_id = s.id
     JOIN base_network shop_network ON shop_network.id = s.network_id
     JOIN base_employee employee ON wd.employee_id = employee.id
     JOIN base_user u ON employee.user_id = u.id
     JOIN base_network user_network ON user_network.id = u.network_id
     LEFT JOIN timetable_workerdaycashboxdetails wd_details ON wd.id = wd_details.worker_day_id AND wd_details.id = (( SELECT max(wd_details2.id) AS max
           FROM timetable_workerdaycashboxdetails wd_details2
          WHERE wd.id = wd_details2.worker_day_id))
     LEFT JOIN timetable_worktype wd_details_wt ON wd_details.work_type_id = wd_details_wt.id
     LEFT JOIN timetable_worktypename wd_details_wt_name ON wd_details_wt.work_type_name_id = wd_details_wt_name.id
  WHERE wd.is_approved IS TRUE AND NOT (wd.employment_id IS NULL AND wd.type_id::text = 'W'::text AND wd.employee_id IS NOT NULL) AND (wd.employee_id IN ( SELECT be.employee_id
           FROM base_employment be
          WHERE be.employee_id = wd.employee_id AND (be.dt_hired <= wd.dt OR be.dt_hired IS NULL) AND (be.dt_fired >= wd.dt OR be.dt_fired IS NULL)))
  GROUP BY wd.dt, employee.user_id, employee.tabel_code, wd.type_id, u.username, (concat(u.last_name, ' ', u.first_name, ' ', u.middle_name)), wd.shop_id, s.name, s.code, (COALESCE(wd_details_wt_name.name, ''::character varying)), wd.employee_id, shop_network.id, user_network.id;
""")
    else:
        schema_editor.execute("""
    CREATE OR REPLACE VIEW timetable_plan_and_fact_hours AS
 SELECT string_agg(wd.id::text, '-'::text ORDER BY wd.is_fact) AS id,
    wd.dt,
    wd.shop_id,
    s.name AS shop_name,
    s.code AS shop_code,
    employee.user_id AS worker_id,
    wd.type_id AS wd_type_id,
    concat(u.last_name, ' ', u.first_name, ' ', u.middle_name) AS worker_fio,
    COALESCE(sum(date_part('epoch'::text, GREATEST(wd.work_hours, '00:00:00'::interval)) / 3600::double precision) FILTER (WHERE wd.is_fact IS TRUE), 0::double precision) AS fact_work_hours,
    COALESCE(sum(date_part('epoch'::text, GREATEST(wd.work_hours, '00:00:00'::interval)) / 3600::double precision) FILTER (WHERE wd.is_fact IS FALSE), 0::double precision) AS plan_work_hours,
    COALESCE(sum(date_part('epoch'::text, GREATEST(wd.work_hours, '00:00:00'::interval)) / 3600::double precision) FILTER (WHERE wd.is_fact IS TRUE AND (wd.created_by_id IS NOT NULL OR wd.last_edited_by_id IS NOT NULL)), 0::double precision) AS fact_manual_work_hours,
    sum(COALESCE(GREATEST(date_part('epoch'::text, (wd_fact.dttm_work_start - (wd.dttm_work_start + shop_network.allowed_interval_for_late_arrival))::interval) / 3600::double precision, 0::double precision), 0::double precision)) as late_arrival_hours,
    sum(COALESCE(GREATEST(date_part('epoch'::text,((wd.dttm_work_end - shop_network.allowed_interval_for_early_departure) - wd_fact.dttm_work_end)::interval) / 3600::double precision, 0::double precision), 0::double precision)) as early_departure_hours,
    (count(*) FILTER (WHERE COALESCE(GREATEST(date_part('epoch'::text, (wd_fact.dttm_work_start - (wd.dttm_work_start + shop_network.allowed_interval_for_late_arrival))::interval) / 3600::double precision, 0::double precision), 0::double precision) > 0)) as late_arrival_count,
    (count(*) FILTER (WHERE COALESCE(GREATEST(date_part('epoch'::text,((wd.dttm_work_end - shop_network.allowed_interval_for_early_departure) - wd_fact.dttm_work_end)::interval) / 3600::double precision, 0::double precision), 0::double precision) > 0)) as early_departure_count,
    
    sum(COALESCE(GREATEST(date_part('epoch'::text, ((wd.dttm_work_start - shop_network.allowed_interval_for_early_arrival) - wd_fact.dttm_work_start)::interval) / 3600::double precision, 0::double precision), 0::double precision)) as early_arrival_hours,
    sum(COALESCE(GREATEST(date_part('epoch'::text, (wd_fact.dttm_work_end - (wd.dttm_work_end + shop_network.allowed_interval_for_late_departure))::interval) / 3600::double precision, 0::double precision), 0::double precision)) as late_departure_hours,
    (count(*) FILTER (WHERE COALESCE(GREATEST(date_part('epoch'::text, ((wd.dttm_work_start - shop_network.allowed_interval_for_early_arrival) - wd_fact.dttm_work_start)::interval) / 3600::double precision, 0::double precision), 0::double precision) > 0)) as early_arrival_count,
    (count(*) FILTER (WHERE COALESCE(GREATEST(date_part('epoch'::text, (wd_fact.dttm_work_end - (wd.dttm_work_end + shop_network.allowed_interval_for_late_departure))::interval) / 3600::double precision, 0::double precision), 0::double precision) > 0)) as late_departure_count,
    
    COALESCE(sum(date_part('epoch'::text, GREATEST(wd.work_hours, '00:00:00'::interval)) / 3600::double precision) FILTER (WHERE wd.closest_plan_approved_id IS NULL AND wd.is_fact IS TRUE), 0::double precision) AS fact_without_plan_work_hours,
    (count (*) FILTER (WHERE wd.closest_plan_approved_id IS NULL AND wd.is_fact IS TRUE)) as fact_without_plan_count,
    
    COALESCE(sum(COALESCE(GREATEST(date_part('epoch'::text, (wd.work_hours - COALESCE(wd_fact.work_hours, '00:00:00'::interval))::interval) / 3600::double precision, 0::double precision), 0::double precision)) FILTER (WHERE wd.is_fact IS FALSE), 0::double precision) AS lost_work_hours,
    (count(*) FILTER (WHERE COALESCE(GREATEST(date_part('epoch'::text, (wd.work_hours - COALESCE(wd_fact.work_hours, '00:00:00'::interval))::interval) / 3600::double precision, 0::double precision), 0::double precision) > 0 AND wd.is_fact IS FALSE)) as lost_work_hours_count,
    
        CASE
            WHEN count(*) FILTER (WHERE wd.is_fact IS FALSE AND wd.is_vacancy IS TRUE) = 1 THEN true
            ELSE false
        END AS is_vacancy,
    (count(*) FILTER (WHERE wd.is_fact IS TRUE AND wd.dttm_work_start IS NOT NULL) + count(*) FILTER (WHERE wd.is_fact IS TRUE AND wd.dttm_work_end IS NOT NULL))::integer AS ticks_fact_count,
    (COALESCE(count(*) FILTER (WHERE wd.is_fact IS FALSE AND wd.type_id::text = 'W'::text), 0::bigint) * 2)::integer AS ticks_plan_count,
    u.username AS worker_username,
    COALESCE(wd_details_wt_name.name, ''::character varying) AS work_type_name,
    date_trunc('minute'::text, min(wd.dttm_work_start) FILTER (WHERE wd.is_fact IS FALSE)) AS dttm_work_start_plan,
    date_trunc('minute'::text, max(wd.dttm_work_end) FILTER (WHERE wd.is_fact IS FALSE)) AS dttm_work_end_plan,
    date_trunc('minute'::text, min(wd.dttm_work_start) FILTER (WHERE wd.is_fact IS TRUE)) AS dttm_work_start_fact,
    date_trunc('minute'::text, max(wd.dttm_work_end) FILTER (WHERE wd.is_fact IS TRUE)) AS dttm_work_end_fact,
    count(*) FILTER (WHERE wd.is_fact IS TRUE AND wd.dttm_work_start IS NOT NULL)::integer AS ticks_comming_fact_count,
    count(*) FILTER (WHERE wd.is_fact IS TRUE AND wd.dttm_work_end IS NOT NULL)::integer AS ticks_leaving_fact_count,
    count(*) FILTER (WHERE wd.is_fact IS FALSE AND wd.created_by_id IS NULL AND wd.last_edited_by_id IS NULL AND wd.work_hours IS NOT NULL AND wd.work_hours > '00:00:00'::interval) AS auto_created_plan,
    count(*) FILTER (WHERE wd.is_fact IS TRUE AND wd.created_by_id IS NULL AND wd.last_edited_by_id IS NULL AND wd.work_hours IS NOT NULL AND wd.work_hours > '00:00:00'::interval) AS auto_created_fact,
    employee.tabel_code,
    wd.employee_id,
    shop_network.name AS shop_network,
    user_network.name AS user_network,
    shop_network.id <> user_network.id AS is_outsource
   FROM timetable_workerday wd
     JOIN base_shop s ON wd.shop_id = s.id
     JOIN base_network shop_network ON shop_network.id = s.network_id
     JOIN base_employee employee ON wd.employee_id = employee.id
     JOIN base_user u ON employee.user_id = u.id
     JOIN base_network user_network ON user_network.id = u.network_id
     LEFT JOIN timetable_workerdaycashboxdetails wd_details ON wd.id = wd_details.worker_day_id AND wd_details.id = (( SELECT max(wd_details2.id) AS max
           FROM timetable_workerdaycashboxdetails wd_details2
          WHERE wd.id = wd_details2.worker_day_id))
     LEFT JOIN timetable_worktype wd_details_wt ON wd_details.work_type_id = wd_details_wt.id
     LEFT JOIN timetable_worktypename wd_details_wt_name ON wd_details_wt.work_type_name_id = wd_details_wt_name.id
     LEFT JOIN timetable_workerday wd_fact ON wd_fact.closest_plan_approved_id = wd.id AND wd_fact.is_approved IS TRUE
  WHERE wd.is_approved IS TRUE AND NOT (wd.employment_id IS NULL AND wd.type_id::text = 'W'::text AND wd.employee_id IS NOT NULL) AND (wd.employee_id IN ( SELECT be.employee_id
           FROM base_employment be
          WHERE be.employee_id = wd.employee_id AND (be.dt_hired <= wd.dt OR be.dt_hired IS NULL) AND (be.dt_fired >= wd.dt OR be.dt_fired IS NULL)))
  GROUP BY wd.dt, employee.user_id, employee.tabel_code, wd.type_id, u.username, (concat(u.last_name, ' ', u.first_name, ' ', u.middle_name)), wd.shop_id, s.name, s.code, (COALESCE(wd_details_wt_name.name, ''::character varying)), wd.employee_id, shop_network.id, user_network.id;
    """)

class Migration(migrations.Migration):

    dependencies = [
        ('timetable', '0094_auto_20211101_1555'),
    ]

    operations = [
        migrations.RunPython(replace_view_plan_and_fact_hours, migrations.RunPython.noop)
    ]
