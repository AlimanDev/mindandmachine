# Generated by Django 2.2.16 on 2021-03-31 07:13

from django.db import migrations

def create_or_replace_metabase_views(app, schema_editor):
    schema_editor.execute(
        """
        CREATE OR REPLACE VIEW public.metabase_to AS
        SELECT DISTINCT ot.shop_id,
            (dates.dttm_forecast)::date AS dt,
            sum(plan.value) AS plan,
            sum(fact.value) AS fact
        FROM ((((public.forecast_operationtypename otn
            JOIN public.forecast_operationtype ot ON ((otn.id = ot.operation_type_name_id)))
            JOIN public.forecast_periodclients dates ON ((dates.operation_type_id = ot.id)))
            LEFT JOIN public.forecast_periodclients plan ON (((plan.operation_type_id = ot.id) AND ((plan.type)::text = 'L'::text) AND ((plan.dttm_forecast)::date = (dates.dttm_forecast)::date))))
            LEFT JOIN public.forecast_periodclients fact ON (((fact.operation_type_id = ot.id) AND ((fact.type)::text = 'F'::text) AND ((fact.dttm_forecast)::date = (dates.dttm_forecast)::date))))
        WHERE otn.is_special
        GROUP BY ot.shop_id, ((dates.dttm_forecast)::date);
        """
    )
    schema_editor.execute(
        """
        CREATE OR REPLACE VIEW public.metabase_financial_stat AS
        SELECT turnover.dt,
            turnover.shop_id,
            turnover.plan,
            turnover.fact,
            sum(fot."Плановые часы работы") AS fot_plan,
            sum(fot."Фактические часы работы") AS fot_fact,
            (turnover.plan / NULLIF(sum(fot."Плановые часы работы"), (0)::double precision)) AS productivity_plan,
            (turnover.fact / NULLIF(sum(fot."Фактические часы работы"), (0)::double precision)) AS productivity_fact,
            count(e.id) AS workers
        FROM ((public.metabase_to turnover
            LEFT JOIN public.plan_and_fact_hours fot ON (((turnover.shop_id = fot."ID Магазина") AND (turnover.dt = fot."Дата"))))
            LEFT JOIN public.base_employment e ON (((e.shop_id = turnover.shop_id) AND (e.dt_hired <= turnover.dt) AND ((e.dt_fired IS NULL) OR (e.dt_fired >= turnover.dt)))))
        GROUP BY turnover.dt, turnover.shop_id, turnover.plan, turnover.fact;
        """
    )


class Migration(migrations.Migration):

    dependencies = [
        ('forecast', '0036_merge_20201231_0751'),
    ]

    operations = [
        migrations.RunPython(create_or_replace_metabase_views),
    ]
