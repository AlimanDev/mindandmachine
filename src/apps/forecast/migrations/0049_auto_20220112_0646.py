# Generated by Django 3.2.9 on 2022-01-12 06:46

from django.db import migrations

def connect_work_type_and_operation_type(apps, schema_editor):
    WorkTypeName = apps.get_model('timetable', 'WorkTypeName')
    WorkType = apps.get_model('timetable', 'WorkType')
    OperationTypeName = apps.get_model('forecast', 'OperationTypeName')
    OperationType = apps.get_model('forecast', 'OperationType')

    for wt_name in WorkTypeName.objects.all():
        update_or_create_kwargs = {}
        defaults = {
            'do_forecast': 'F',
            'code': wt_name.code,
            'work_type_name_id': wt_name.id,
            'name': wt_name.name,
            'network_id': wt_name.network_id,
            'dttm_deleted': wt_name.dttm_deleted,
        }
        if not OperationTypeName.objects.filter(work_type_name_id=wt_name.id).exists():
            update_or_create_kwargs['network_id'] = defaults.pop('network_id')
            if wt_name.code:
                update_or_create_kwargs['code'] = defaults.pop('code')
            else:
                update_or_create_kwargs['name'] = defaults.pop('name')
        else:
            update_or_create_kwargs['work_type_name_id'] = defaults.pop('work_type_name_id')

        OperationTypeName.objects.update_or_create(
            **update_or_create_kwargs,
            defaults=defaults,
        )
    
    for work_type in WorkType.objects.select_related('work_type_name__operation_type_name').all():
        update_or_create_kwargs = {}
        defaults = {
            'status': 'U',
            'work_type_id': work_type.id,
            'dttm_deleted': work_type.dttm_deleted,
            'operation_type_name': work_type.work_type_name.operation_type_name,
            'shop_id': work_type.shop_id,
        }
        if not OperationType.objects.filter(work_type_id=work_type.id).exists():
            update_or_create_kwargs['shop_id'] = defaults.pop('shop_id')
            update_or_create_kwargs['operation_type_name'] = defaults.pop('operation_type_name')
        else:
            update_or_create_kwargs['work_type_id'] = defaults.pop('work_type_id')
        
        OperationType.objects.update_or_create(
            **update_or_create_kwargs,
            defaults=defaults,
        )


class Migration(migrations.Migration):

    dependencies = [
        ('forecast', '0048_alter_operationtypename_work_type_name'),
    ]

    operations = [
        migrations.RunPython(connect_work_type_and_operation_type, migrations.RunPython.noop),
    ]
