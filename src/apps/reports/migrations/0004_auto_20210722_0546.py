# Generated by Django 2.2.16 on 2021-07-22 05:46

from django.db import migrations
from src.apps.reports.registry import ReportRegistryHolder


def move_events_to_report_config(app, schema_editor):
    ReportType = app.get_model('reports', 'ReportType')
    Network = app.get_model('base', 'Network')
    for network in Network.objects.all():
        for event_code, event_cls in ReportRegistryHolder.get_registry().items():
            ReportType.objects.update_or_create(
                network=network,
                code=event_code,
                defaults={
                    'name': event_cls.name,
                }
            )
    ReportConfig = app.get_model('reports', 'ReportConfig')
    EventType = app.get_model('events', 'EventType')
    EventEmailNotification = app.get_model('notifications', 'EventEmailNotification')
    notifications = EventEmailNotification.objects.filter(
        event_type__code__in=ReportType.objects.all().values_list('code', flat=True),
    ).select_related('report_config', 'event_type')
    types_by_code_network = {}
    for t in ReportType.objects.all():
        types_by_code_network.setdefault(t.code, {})[t.network_id] = t
    for notification in notifications:
        if not notification.report_config:
            continue
        config = ReportConfig.objects.create(
            name=notification.report_config.name,
            cron_id=notification.report_config.cron_id,
            report_type=types_by_code_network[notification.event_type.code][notification.event_type.network_id],
            count_of_periods=notification.report_config.count_of_periods,
            period=notification.report_config.period,
            include_today=notification.report_config.include_today,
            email_addresses=notification.email_addresses,
            email_text=notification.custom_email_template,
            subject=notification.subject,
        )
        config.shops.add(*notification.report_config.shops.all())
        config.users.add(*notification.users.all())
        config.groups.add(*notification.groups.all())
        config.shops_to_notify.add(*notification.shops.all())
    report_ids_to_delete = list(notifications.values_list('report_config_id', flat=True))
    notifications.delete()
    EventType.objects.filter(code__in=ReportType.objects.all().values_list('code', flat=True)).delete()
    EventEmailNotification.objects.all().update(report_config=None)
    ReportConfig.objects.filter(id__in=report_ids_to_delete).delete()
    ReportConfig.objects.filter(report_type__isnull=True).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('reports', '0003_auto_20210721_1022'),
        ('notifications', '0004_merge_20210423_1356'),
    ]

    operations = [
        migrations.RunPython(move_events_to_report_config),
    ]
