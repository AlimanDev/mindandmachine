# Generated by Django 3.2.9 on 2022-02-14 11:46

from django.db import migrations


def add_permissions(apps, schema_editor):
    permissions = [
        ('User_add_biometrics', 'POST', ('admin', 'admin_outsource', 'admin_client', 'urs')),
        ('WorkerDay_confirm_vacancy_to_worker', 'POST', ('admin', 'admin_outsource', 'admin_client', 'urs', 'director')),
        ('WorkerDay_reconfirm_vacancy_to_worker', 'POST', ('admin', 'admin_outsource', 'admin_client', 'urs', 'director')),
        ('Network', 'GET', ('director',)),
    ]
    worker_day_permissions = [
        ('P', 'U', 40, 60, ('director',)),
        ('P', 'U', None, None, ('admin', 'admin_client', 'urs')),
        ('P', 'D', 40, 60, ('director',)),
        ('P', 'D', None, None, ('admin', 'admin_client', 'urs')),
        ('F', 'C', 40, 0, ('director',)),
        ('F', 'C', None, None, ('admin', 'admin_client', 'urs')),
        ('F', 'U', 40, 0, ('director',)),
        ('F', 'U', None, None, ('admin', 'admin_client', 'urs')),
        ('F', 'D', 40, 0, ('director',)),
        ('F', 'D', None, None, ('admin', 'admin_client', 'urs')),
    ]

    Group = apps.get_model('base', 'Group')
    FunctionGroup = apps.get_model('base', 'FunctionGroup')
    GroupWorkerDayPermission = apps.get_model('timetable', 'GroupWorkerDayPermission')
    WorkerDayPermission = apps.get_model('timetable', 'WorkerDayPermission')

    for func, method, groups in permissions:
        for group in Group.objects.filter(code__in=groups):
            FunctionGroup.objects.get_or_create(
                group=group,
                method=method,
                func=func,
                defaults=dict(
                    access_type='all',
                )
            )
    
    for graph_type, action, limit_past, limit_future, groups in worker_day_permissions:
        permission, _ = WorkerDayPermission.objects.get_or_create(
            action=action, 
            graph_type=graph_type,
            wd_type_id='W',
        )
        for group in Group.objects.filter(code__in=groups):
            GroupWorkerDayPermission.objects.get_or_create(
                group=group,
                worker_day_permission=permission,
                employee_type=3,
                shop_type=1,
                defaults=dict(
                    limit_days_in_past=limit_past,
                    limit_days_in_future=limit_future,
                )
            )


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0168_auto_20220211_1326'),
        ('timetable', '0114_auto_20220207_1053'),
    ]

    operations = [
        migrations.RunPython(add_permissions, migrations.RunPython.noop),
    ]
