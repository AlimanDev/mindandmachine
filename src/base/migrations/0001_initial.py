# Generated by Django 2.2.7 on 2019-12-17 14:55

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import mptt.fields
import timezone_field.fields


def create_shop_tree(apps, schema_editor):
    Shop = apps.get_model('base', 'Shop')
    shop = Shop.objects.create(
        title='Корневой магазин',
        level=0,
        lft=0,
        rght=0,
        tree_id=0,
    )

    shops = Shop.objects.filter(
        ~models.Q(id = shop.id)
    ).update(parent=shop)
    #Shop._tree_manager.rebuild()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('middle_name', models.CharField(blank=True, max_length=64, null=True)),
                ('dttm_added', models.DateTimeField(auto_now_add=True)),
                ('dttm_deleted', models.DateTimeField(blank=True, null=True)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('sex', models.CharField(choices=[('F', 'Female'), ('M', 'Male')], default='F', max_length=1)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='user_avatar/%Y/%m')),
                ('phone_number', models.CharField(blank=True, max_length=32, null=True)),
                ('access_token', models.CharField(blank=True, max_length=64, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('code', models.SmallIntegerField()),
            ],
            options={
                'verbose_name': 'Регион',
                'verbose_name_plural': 'Регионы',
            },
        ),
        migrations.CreateModel(
            name='WorkerPosition',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=64)),
            ],
            options={
                'verbose_name': 'Должность сотрудника',
                'verbose_name_plural': 'Должности сотрудников',
            },
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timezone', timezone_field.fields.TimeZoneField(default='Europe/Moscow')),
                ('code', models.CharField(blank=True, max_length=64, null=True)),
                ('address', models.CharField(blank=True, max_length=256, null=True)),
                ('type', models.CharField(choices=[('r', 'region'), ('s', 'shop')], default='s', max_length=1)),
                ('dt_opened', models.DateField(blank=True, null=True)),
                ('dt_closed', models.DateField(blank=True, null=True)),
                ('dttm_added', models.DateTimeField(auto_now_add=True)),
                ('dttm_deleted', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(max_length=64)),
                ('mean_queue_length', models.FloatField(default=3)),
                ('max_queue_length', models.FloatField(default=7)),
                ('dead_time_part', models.FloatField(default=0.1)),
                ('beta', models.FloatField(default=0.9)),
                ('demand_coef', models.FloatField(default=1)),
                ('forecast_step_minutes', models.TimeField(default=datetime.time(0, 30))),
                ('count_lack', models.BooleanField(default=False)),
                ('method_params', models.CharField(default='[]', max_length=4096)),
                ('cost_weights', models.CharField(default='{}', max_length=4096)),
                ('init_params', models.CharField(default='{"n_working_days_optimal": 20}', max_length=2048)),
                ('break_triplets', models.CharField(default='[]', max_length=1024)),
                ('idle', models.SmallIntegerField(default=0)),
                ('fot', models.IntegerField(default=0)),
                ('less_norm', models.SmallIntegerField(default=0)),
                ('more_norm', models.SmallIntegerField(default=0)),
                ('tm_shop_opens', models.TimeField(default=datetime.time(6, 0))),
                ('tm_shop_closes', models.TimeField(default=datetime.time(23, 0))),
                ('shift_start', models.SmallIntegerField(default=6)),
                ('shift_end', models.SmallIntegerField(default=12)),
                ('restricted_start_times', models.CharField(default='[]', max_length=1024)),
                ('restricted_end_times', models.CharField(default='[]', max_length=1024)),
                ('min_change_time', models.IntegerField(default=12)),
                ('even_shift_morning_evening', models.BooleanField(default=False)),
                ('paired_weekday', models.BooleanField(default=False)),
                ('exit1day', models.BooleanField(default=False)),
                ('exit42hours', models.BooleanField(default=False)),
                ('process_type', models.CharField(choices=[('P', 'production calendar'), ('N', 'norm per year')], default='N', max_length=1)),
                ('absenteeism', models.SmallIntegerField(default=0)),
                ('queue_length', models.FloatField(default=3.0)),
                ('max_work_hours_7days', models.SmallIntegerField(default=48)),
                ('staff_number', models.SmallIntegerField(default=0)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='child', to='base.Shop')),
                ('region', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Region')),
            ],
            options={
                'verbose_name': 'Отдел',
                'verbose_name_plural': 'Отделы',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dttm_added', models.DateTimeField(auto_now_add=True)),
                ('dttm_modified', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=128)),
                ('subordinates', models.ManyToManyField(blank=True, related_name='_group_subordinates_+', to='base.Group')),
            ],
            options={
                'verbose_name': 'Группа пользователей',
                'verbose_name_plural': 'Группы пользователей',
            },
        ),
        migrations.CreateModel(
            name='Employment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('is_fixed_hours', models.BooleanField(default=False)),
                ('dttm_added', models.DateTimeField(auto_now_add=True)),
                ('dttm_deleted', models.DateTimeField(blank=True, null=True)),
                ('dt_hired', models.DateField(default=datetime.date(2019, 1, 1))),
                ('dt_fired', models.DateField(blank=True, null=True)),
                ('salary', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('week_availability', models.SmallIntegerField(default=7)),
                ('norm_work_hours', models.SmallIntegerField(default=100)),
                ('shift_hours_length_min', models.SmallIntegerField(blank=True, null=True)),
                ('shift_hours_length_max', models.SmallIntegerField(blank=True, null=True)),
                ('min_time_btw_shifts', models.SmallIntegerField(blank=True, null=True)),
                ('auto_timetable', models.BooleanField(default=True)),
                ('tabel_code', models.CharField(blank=True, max_length=15, null=True)),
                ('is_ready_for_overworkings', models.BooleanField(default=False)),
                ('dt_new_week_availability_from', models.DateField(blank=True, null=True)),
                ('function_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Group')),
                ('position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.WorkerPosition')),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='employments', to='base.Shop')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='employments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Трудоустройство',
                'verbose_name_plural': 'Трудоустройства',
            },
        ),
        migrations.CreateModel(
            name='FunctionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dttm_added', models.DateTimeField(auto_now_add=True)),
                ('dttm_modified', models.DateTimeField(blank=True, null=True)),
                ('func', models.CharField(choices=[('signout', 'signout'), ('password_edit', 'password_edit'), ('get_worker_day_approves', 'get_worker_day_approves'), ('create_worker_day_approve', 'create_worker_day_approve'), ('delete_worker_day_approve', 'delete_worker_day_approve'), ('get_cashboxes', 'get_cashboxes'), ('get_cashboxes_info', 'get_cashboxes_info'), ('create_cashbox', 'create_cashbox'), ('update_cashbox', 'update_cashbox'), ('delete_cashbox', 'delete_cashbox'), ('get_types', 'get_types'), ('create_work_type', 'create_work_type'), ('edit_work_type', 'edit_work_type'), ('delete_work_type', 'delete_work_type'), ('get_notifications', 'get_notifications'), ('get_notifications2', 'get_notifications2'), ('set_notifications_read', 'set_notifications_read'), ('get_worker_day', 'get_worker_day'), ('delete_worker_day', 'delete_worker_day'), ('request_worker_day', 'request_worker_day'), ('set_worker_day', 'set_worker_day'), ('handle_worker_day_request', 'handle_worker_day_request'), ('get_worker_day_logs', 'get_worker_day_logs'), ('get_cashier_info', 'get_cashier_info'), ('change_cashier_info', 'change_cashier_info'), ('create_cashier', 'create_cashier'), ('get_cashiers_info', 'get_cashiers_info'), ('select_cashiers', 'select_cashiers'), ('get_not_working_cashiers_list', 'get_not_working_cashiers_list'), ('get_cashiers_list', 'get_cashiers_list'), ('change_cashier_status', 'change_cashier_status'), ('set_selected_cashiers', 'set_selected_cashiers'), ('delete_cashier', 'delete_cashier'), ('set_timetable', 'set_timetable'), ('create_timetable', 'create_timetable'), ('delete_timetable', 'delete_timetable'), ('get_cashier_timetable', 'get_cashier_timetable'), ('get_cashiers_timetable', 'get_cashiers_timetable'), ('dublicate_cashier_table', 'dublicate_cashier_table'), ('get_slots', 'get_slots'), ('get_all_slots', 'get_all_slots'), ('get_workers', 'get_workers'), ('get_outsource_workers', 'get_outsource_workers'), ('get_user_urv', 'get_user_urv'), ('upload_urv', 'upload_urv'), ('get_forecast', 'get_forecast'), ('upload_demand', 'upload_demand'), ('upload_timetable', 'upload_timetable'), ('notify_workers_about_vacancy', 'notify_workers_about_vacancy'), ('do_notify_action', 'do_notify_action'), ('get_workers_to_exchange', 'get_workers_to_exchange'), ('exchange_workers_day', 'exchange_workers_day'), ('set_demand', 'set_demand'), ('set_pred_bills', 'set_pred_bills'), ('get_operation_templates', 'get_operation_templates'), ('create_operation_template', 'create_operation_template'), ('update_operation_template', 'update_operation_template'), ('delete_operation_template', 'delete_operation_template'), ('show_vacancy', 'show_vacancy'), ('cancel_vacancy', 'cancel_vacancy'), ('confirm_vacancy', 'confirm_vacancy'), ('get_demand_xlsx', 'get_demand_xlsx'), ('get_department_stats_xlsx', 'get_department_stats_xlsx'), ('get_timetable_xlsx', 'get_timetable_xlsx'), ('get_urv_xlsx', 'get_urv_xlsx'), ('get_tabel', 'get_tabel'), ('get_department', 'get_department'), ('add_department', 'add_department'), ('edit_department', 'edit_department'), ('get_department_list', 'get_department_list'), ('get_department_stats', 'get_department_stats'), ('get_parameters', 'get_parameters'), ('set_parameters', 'set_parameters'), ('get_demand_change_logs', 'get_demand_change_logs'), ('get_table', 'get_table'), ('get_status', 'get_status'), ('get_change_request', 'get_change_request'), ('get_month_stat', 'get_month_stat'), ('get_indicators', 'get_indicators'), ('get_worker_position_list', 'get_worker_position_list'), ('set_worker_restrictions', 'set_worker_restrictions'), ('create_predbills_request', 'create_predbills_request')], max_length=128)),
                ('method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('DELETE', 'DELETE')], default='GET', max_length=6)),
                ('access_type', models.CharField(choices=[('S', 'self'), ('TS', 'shop'), ('TSS', 'supershop'), ('A', 'all')], max_length=32)),
                ('level_up', models.IntegerField(default=0)),
                ('level_down', models.IntegerField(default=100)),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='allowed_functions', to='base.Group')),
            ],
            options={
                'verbose_name': 'Доступ к функциям',
                'unique_together': {('func', 'group')},
            },
        ),
        migrations.CreateModel(
            name='ProductionDay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt', models.DateField()),
                ('type',
                 models.CharField(choices=[('W', 'workday'), ('H', 'holiday'), ('S', 'short workday')], max_length=1)),
                ('is_celebration', models.BooleanField(default=False)),
                ('region', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Region')),
            ],
            options={
                'verbose_name': 'День производственного календаря',
                'unique_together': {('dt', 'region')},
            },
        ),
        migrations.RunPython(create_shop_tree),
    ]



