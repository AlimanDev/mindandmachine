server {
    resolver 127.0.0.11 valid=3s ipv6=off;

    listen 80 default_server;
    listen [::]:80;

    server_name  ~^(?<subdomain>.+)\.mindandmachine\.ru$;

    index index.html index.htm;

    location / {
        location /index.html {
             add_header Cache-Control 'no-cache, no-store, must-revalidate';
             add_header Pragma no-cache;
             add_header Expires 0;
        }

        location ~ \.map$ {
            # TODO: сделать проброс токена через системную переменную
            set $sentry_security_token '5973845e563f11eba1e34201c0a8d02a';

            if ($http_x_sentry_token = '') {
                set $sentry_token_is_empty "1";
            }

            if ($cookie_sourceMapToken = '') {
                set $sentry_token_is_empty "${sentry_token_is_empty}1";
            }

            if ($sentry_token_is_empty = "11") {
                return 403;
            }

            if ($http_x_sentry_token != $sentry_security_token) {
                set $sentry_token_is_not_equal "1";
            }

            if ($cookie_sourceMapToken != $sentry_security_token) {
                set $sentry_token_is_not_equal "${sentry_token_is_not_equal}1";
            }

            if ($sentry_token_is_not_equal = "11") {
                return 403;
            }

            access_log off;
            if ($subdomain ~* ^urv\-.+$) {
                set $frontend_urv "http://frontend_urv:80";
                proxy_pass $frontend_urv;
            }
            if ($subdomain ~* ^m\-.+$) {
                set $frontend_m "http://frontend_m:80";
                proxy_pass $frontend_m;
            }
            set $frontend "http://frontend:80";
            proxy_pass $frontend;
        }

        access_log off;
        if ($subdomain ~* ^urv\-.+$) {
            set $frontend_urv "http://frontend_urv:80";
            proxy_pass $frontend_urv;
        }
        if ($subdomain ~* ^m\-.+$) {
            set $frontend_m "http://frontend_m:80";
            proxy_pass $frontend_m;
        }
        set $frontend "http://frontend:80";
        proxy_pass $frontend;
    }

    location /static/ {
        expires 30d;
        access_log off;
        alias /webapp/static/;
    }

    location ~ ^/(rest_api|api|admin|redoc)/ {
        lua_need_request_body on;
        set $resp_body "";
        body_filter_by_lua '
            if ngx.status == 400 then
                local resp_body = string.sub(ngx.arg[1], 1, 1000)
                ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
                if ngx.arg[2] then
                  ngx.var.resp_body = ngx.ctx.buffered
                end
            end
        ';

        include uwsgi_params;
        uwsgi_pass unix:///uwsgi/web.sock;
        uwsgi_read_timeout 15m;
        uwsgi_send_timeout 600s;
        uwsgi_connect_timeout 300s;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        access_log /var/log/nginx/access.log postdata;
    }

    location /flower/ {
        # TODO: разобраться почему не работает
        #set $flower "http://flower";
        #proxy_pass $flower;
        proxy_pass http://flower;
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # TODO: подумать как сделать опциональным
    location /metabase/ {
        # TODO: разобраться почему не работает
        #set $metabase "http://metabase:3000/";
        #proxy_pass $metabase;
        proxy_pass http://metabase:3000/;
    }
}
